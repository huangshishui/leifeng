Index: src/main/java/io/renren/common/io/body/UserBody.java
===================================================================
--- src/main/java/io/renren/common/io/body/UserBody.java	(revision c201dc973c5e91b987261de104cbf866b44b62c8)
+++ src/main/java/io/renren/common/io/body/UserBody.java	(revision c201dc973c5e91b987261de104cbf866b44b62c8)
@@ -0,0 +1,34 @@
+package io.renren.common.io.body;
+
+import io.renren.modules.app.entity.setting.Member;
+import org.jim.common.packets.Message;
+
+/**
+ * @auther: Easy
+ * @date: 19-4-18 10:21
+ * @description:
+ */
+public class UserBody extends Message {
+    private Long memberId;
+    private String token;
+    public UserBody(Long memberId, String token) {
+        this.memberId = memberId;
+        this.token = token;
+    }
+
+    public Long getMemberId() {
+        return memberId;
+    }
+
+    public void setMemberId(Long memberId) {
+        this.memberId = memberId;
+    }
+
+    public String getToken() {
+        return token;
+    }
+
+    public void setToken(String token) {
+        this.token = token;
+    }
+}
Index: src/main/java/io/renren/common/io/service/user/processor/UserLoginServer.java
===================================================================
--- src/main/java/io/renren/common/io/service/user/processor/UserLoginServer.java	(revision c201dc973c5e91b987261de104cbf866b44b62c8)
+++ src/main/java/io/renren/common/io/service/user/processor/UserLoginServer.java	(revision c201dc973c5e91b987261de104cbf866b44b62c8)
@@ -0,0 +1,19 @@
+package io.renren.common.io.service.user.processor;
+
+import io.renren.common.io.body.UserBody;
+import io.renren.common.io.service.user.resp.UserRespBody;
+import org.jim.common.packets.LoginReqBody;
+import org.jim.common.packets.LoginRespBody;
+import org.jim.server.command.handler.processor.CmdProcessor;
+import org.tio.core.ChannelContext;
+
+/**
+ * @auther: Easy
+ * @date: 19-4-18 11:08
+ * @description:
+ */
+public interface UserLoginServer extends CmdProcessor {
+    UserRespBody access(UserBody var1, ChannelContext var2);
+
+    void onSuccess(ChannelContext var1);
+}
Index: src/main/java/io/renren/common/io/service/user/processor/impl/UserLoginProcessor.java
===================================================================
--- src/main/java/io/renren/common/io/service/user/processor/impl/UserLoginProcessor.java	(revision c201dc973c5e91b987261de104cbf866b44b62c8)
+++ src/main/java/io/renren/common/io/service/user/processor/impl/UserLoginProcessor.java	(revision c201dc973c5e91b987261de104cbf866b44b62c8)
@@ -0,0 +1,99 @@
+package io.renren.common.io.service.user.processor.impl;
+
+import io.renren.common.io.SocketServiceUtil;
+import io.renren.common.io.body.UserBody;
+import io.renren.common.io.service.user.processor.UserLoginServer;
+import io.renren.common.io.service.user.resp.UserRespBody;
+import io.renren.common.utils.RedisUtils;
+import io.renren.modules.app.entity.setting.Member;
+import io.renren.modules.app.service.MemberService;
+import org.jim.common.ImPacket;
+import org.jim.common.ImSessionContext;
+import org.jim.common.ImStatus;
+import org.jim.common.packets.Command;
+import org.jim.common.packets.Group;
+import org.jim.common.packets.User;
+import org.jim.common.utils.JsonKit;
+import org.jim.server.command.CommandManager;
+import org.jim.server.command.handler.JoinGroupReqHandler;
+import org.tio.core.ChannelContext;
+
+import java.util.ArrayList;
+import java.util.List;
+
+/**
+ * @auther: Easy
+ * @date: 19-4-18 11:11
+ * @description:
+ */
+public class UserLoginProcessor implements UserLoginServer {
+
+    public  User getUser(Long memberId){
+        RedisUtils redisUtils =SocketServiceUtil.getBean(RedisUtils.class);
+        User user=redisUtils.get("online:"+memberId,User.class);
+        MemberService memberService= SocketServiceUtil.getBean(MemberService.class);
+        //demo中用map，生产环境需要用cache
+        Member member = new Member();
+        if(user==null){
+            member = memberService.getMember(memberId);
+            if(member!=null){
+                user=new User();
+                user.setId(member.getId().toString());
+                user.setNick(member.getNickName());
+                user.setAvatar(member.getAvatar());
+                user.setGroups(initGroups(user));
+                redisUtils.set("online:"+memberId,user);
+                return user;
+            }
+        }
+        return user;
+    }
+    public List<Group> initGroups(User user){
+        //模拟的群组;正式根据业务去查数据库或者缓存;
+        List<Group> groups = new ArrayList<Group>();
+        groups.add(new Group("100","雷锋通讯组"));
+        return groups;
+    }
+
+    @Override
+    public UserRespBody access(UserBody userBody, ChannelContext channelContext) {
+        Long memberId = userBody.getMemberId();
+        ImSessionContext imSessionContext = (ImSessionContext)channelContext.getAttribute();
+        String handshakeToken = imSessionContext.getToken();
+        UserRespBody userRespBody;
+        User user = getUser(memberId);
+        if(user == null){
+            userRespBody = new UserRespBody(Command.COMMAND_LOGIN_RESP, ImStatus.C10008);
+        }else{
+            userRespBody = new UserRespBody(Command.COMMAND_LOGIN_RESP, ImStatus.C10007,user);
+        }
+        return userRespBody;
+    }
+
+    @Override
+    public void onSuccess(ChannelContext channelContext) {
+        ImSessionContext imSessionContext = (ImSessionContext)channelContext.getAttribute();
+        User user = imSessionContext.getClient().getUser();
+        if(user.getGroups() != null){
+            for(Group group : user.getGroups()){//发送加入群组通知
+                ImPacket groupPacket = new ImPacket(Command.COMMAND_JOIN_GROUP_REQ, JsonKit.toJsonBytes(group));
+                try {
+                    JoinGroupReqHandler joinGroupReqHandler = CommandManager.getCommand(Command.COMMAND_JOIN_GROUP_REQ, JoinGroupReqHandler.class);
+                    joinGroupReqHandler.joinGroupNotify(groupPacket, channelContext);
+                } catch (Exception e) {
+                    e.printStackTrace();
+                }
+            }
+        }
+    }
+
+    @Override
+    public boolean isProtocol(ChannelContext channelContext) {
+        return true;
+    }
+
+    @Override
+    public String name() {
+        return "default";
+    }
+}
Index: src/main/java/io/renren/common/io/service/user/resp/UserRespBody.java
===================================================================
--- src/main/java/io/renren/common/io/service/user/resp/UserRespBody.java	(revision c201dc973c5e91b987261de104cbf866b44b62c8)
+++ src/main/java/io/renren/common/io/service/user/resp/UserRespBody.java	(revision c201dc973c5e91b987261de104cbf866b44b62c8)
@@ -0,0 +1,48 @@
+package io.renren.common.io.service.user.resp;
+
+import org.jim.common.Status;
+import org.jim.common.packets.Command;
+import org.jim.common.packets.RespBody;
+import org.jim.common.packets.User;
+
+/**
+ * @auther: Easy
+ * @date: 19-4-18 11:24
+ * @description:
+ */
+public class UserRespBody extends RespBody {
+    private static final long serialVersionUID = 1L;
+    private String token;
+    private User user;
+
+    public UserRespBody(Command command, Status status) {
+        this(command, status, (User)null);
+    }
+
+    public UserRespBody(Command command, Status status, User user) {
+        super(command, status);
+        this.user = user;
+    }
+
+    public User getUser() {
+        return this.user;
+    }
+
+    public void setUser(User user) {
+        this.user = user;
+    }
+
+    public String getToken() {
+        return this.token;
+    }
+
+    public void setToken(String token) {
+        this.token = token;
+    }
+
+    @Override
+    public void clear() {
+        this.setToken((String)null);
+        this.setUser((User)null);
+    }
+}
Index: src/main/java/io/renren/RenrenApplication.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/io/renren/RenrenApplication.java	(date 1555585743000)
+++ src/main/java/io/renren/RenrenApplication.java	(date 1555586064000)
@@ -2,10 +2,14 @@
 
 import io.renren.common.io.command.IoWsHandshakeProcessor;
 import io.renren.common.io.listener.ImDemoGroupListener;
-import io.renren.common.io.service.LoginServiceProcessor;
+import io.renren.common.io.service.user.handler.UserCloseHandler;
+import io.renren.common.io.service.user.handler.UserLoginReqHandler;
+import io.renren.common.io.service.user.processor.impl.UserCloseProcessor;
+import io.renren.common.io.service.user.processor.impl.UserLoginProcessor;
 import io.renren.datasources.DynamicDataSourceConfig;
-import io.renren.modules.app.event.RenrenMsgListener;
+import org.apache.commons.lang.StringUtils;
 import org.jim.common.ImConfig;
+import org.jim.common.ImConst;
 import org.jim.common.packets.Command;
 import org.jim.server.ImServerStarter;
 import org.jim.server.command.CommandManager;
@@ -20,29 +24,44 @@
 
 import org.springframework.boot.web.servlet.support.SpringBootServletInitializer;
 import org.springframework.context.annotation.Import;
+import org.tio.core.ssl.SslConfig;
 
 
 @SpringBootApplication(exclude={DataSourceAutoConfiguration.class})
 @Import({DynamicDataSourceConfig.class})
 public class RenrenApplication extends SpringBootServletInitializer {
+
 	private static Logger logger = LoggerFactory.getLogger(RenrenApplication.class);
 	public static void main(String[] args) {
 		ImConfig imConfig = new ImConfig();
-		imConfig.setBindPort(8080);
+		imConfig.setBindIp("47.94.164.57");
+		imConfig.setBindPort(11805);
+		imConfig.setIsSSL("on");
+		try {
+			initSsl(imConfig);
+
+		}catch (Exception e){
+			logger.error("SSL start failed.");
+		}
+
 		//初始化SSL;(开启SSL之前,你要保证你有SSL证书哦...)
 		//设置群组监听器，非必须，根据需要自己选择性实现;
 		imConfig.setImGroupListener(new ImDemoGroupListener());
 		ImServerStarter imServerStarter = new ImServerStarter(imConfig);
+
 		/*****************start 以下处理器根据业务需要自行添加与扩展，每个Command都可以添加扩展,此处为demo中处理**********************************/
 		HandshakeReqHandler handshakeReqHandler = CommandManager.getCommand(Command.COMMAND_HANDSHAKE_REQ, HandshakeReqHandler.class);
 		//添加自定义握手处理器;
 		handshakeReqHandler.addProcessor(new IoWsHandshakeProcessor());
-		LoginReqHandler loginReqHandler = CommandManager.getCommand(Command.COMMAND_LOGIN_REQ,LoginReqHandler.class);
+		UserLoginReqHandler userHandler = CommandManager.getCommand(Command.COMMAND_LOGIN_REQ, UserLoginReqHandler.class);
 		//添加登录业务处理器;
-		loginReqHandler.addProcessor(new LoginServiceProcessor());
+		userHandler.addProcessor(new UserLoginProcessor());
+		UserCloseHandler userCloseHandler = CommandManager.getCommand(Command.COMMAND_CLOSE_REQ,UserCloseHandler.class);
+		userCloseHandler.addProcessor(new UserCloseProcessor());
 		/*****************end *******************************************************************************************/
 		try {
 			imServerStarter.start();
+
 		}catch (Exception e){
 			logger.error("IM server start failed.");
 		}
@@ -54,5 +73,23 @@
 
 		return application.sources(RenrenApplication.class);
 	}
+	/**
+	 * 开启SSL之前，你要保证你有SSL证书哦！
+	 * @param imConfig
+	 * @throws Exception
+	 */
+	private static void initSsl(ImConfig imConfig) throws Exception {
+		//开启SSL
+		if(ImConst.ON.equals(imConfig.getIsSSL())){
+			String keyStorePath = "classpath:pet.fangzheng.fun.jks";
+			String keyStoreFile = keyStorePath;
+			String trustStoreFile = keyStorePath;
+			String keyStorePwd = "xukaka";
+			if (StringUtils.isNotBlank(keyStoreFile) && StringUtils.isNotBlank(trustStoreFile)) {
+				SslConfig sslConfig = SslConfig.forServer(keyStoreFile, trustStoreFile, keyStorePwd);
+				imConfig.setSslConfig(sslConfig);
+			}
+		}
+	}
 
 }
Index: src/main/java/io/renren/common/io/SocketServiceUtil.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/io/renren/common/io/SocketServiceUtil.java	(date 1555585743000)
+++ src/main/java/io/renren/common/io/SocketServiceUtil.java	(date 1555586064000)
@@ -1,9 +1,49 @@
 package io.renren.common.io;
 
+import org.springframework.beans.BeansException;
+import org.springframework.context.ApplicationContext;
+import org.springframework.context.ApplicationContextAware;
+import org.springframework.stereotype.Component;
+
 /**
  * @auther: Easy
  * @date: 19-4-18 14:39
  * @description:
  */
-public class SocketServiceUtil {
-}
+@Component
+public class SocketServiceUtil  implements ApplicationContextAware {
+
+    private static ApplicationContext applicationContext;
+
+    @Override
+    public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {
+        if(SocketServiceUtil.applicationContext == null) {
+            SocketServiceUtil.applicationContext = applicationContext;
+        }
+        System.out.println("---------------------------------------------------------------------");
+
+        System.out.println("========ApplicationContext配置成功,在普通类可以通过调用SpringUtils.getAppContext()获取applicationContext对象,applicationContext="+SocketServiceUtil.applicationContext+"========");
+
+        System.out.println("---------------------------------------------------------------------");
+    }
+
+    //获取applicationContext
+    public static ApplicationContext getApplicationContext() {
+        return applicationContext;
+    }
+
+    //通过name获取 Bean.
+    public static Object getBean(String name){
+        return getApplicationContext().getBean(name);
+    }
+
+    //通过class获取Bean.
+    public static <T> T getBean(Class<T> clazz){
+        return getApplicationContext().getBean(clazz);
+    }
+
+    //通过name,以及Clazz返回指定的Bean
+    public static <T> T getBean(String name,Class<T> clazz){
+        return getApplicationContext().getBean(name, clazz);
+    }
+}
\ No newline at end of file
Index: src/main/java/io/renren/common/io/command/IoWsHandshakeProcessor.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/io/renren/common/io/command/IoWsHandshakeProcessor.java	(date 1555585743000)
+++ src/main/java/io/renren/common/io/command/IoWsHandshakeProcessor.java	(date 1555586064000)
@@ -3,15 +3,15 @@
  */
 package io.renren.common.io.command;
 
+import io.renren.common.io.body.UserBody;
+import io.renren.common.io.service.user.handler.UserLoginReqHandler;
 import org.jim.common.ImAio;
 import org.jim.common.ImPacket;
 import org.jim.common.http.HttpConst;
 import org.jim.common.http.HttpRequest;
 import org.jim.common.packets.Command;
-import org.jim.common.packets.LoginReqBody;
 import org.jim.common.utils.JsonKit;
 import org.jim.server.command.CommandManager;
-import org.jim.server.command.handler.LoginReqHandler;
 import org.jim.server.command.handler.processor.handshake.WsHandshakeProcessor;
 import org.tio.core.ChannelContext;
 
@@ -20,14 +20,13 @@
 
 	@Override
 	public void onAfterHandshaked(ImPacket packet, ChannelContext channelContext) throws Exception {
-		LoginReqHandler loginHandler = (LoginReqHandler) CommandManager.getCommand(Command.COMMAND_LOGIN_REQ);
+		UserLoginReqHandler loginHandler = (UserLoginReqHandler) CommandManager.getCommand(Command.COMMAND_LOGIN_REQ);
 		HttpRequest request = (HttpRequest)packet;
-		String connet=request.getParams().get("content") == null ? null : (String)request.getParams().get("content")[0];
-		String username = request.getParams().get("username") == null ? null : (String)request.getParams().get("username")[0];
-		String password = request.getParams().get("password") == null ? null : (String)request.getParams().get("password")[0];
+		String memberId = request.getParams().get("memberId") == null ? null : (String) request.getParams().get("memberId")[0];
 		String token = request.getParams().get("token") == null ? null : (String)request.getParams().get("token")[0];
-		LoginReqBody loginBody = new LoginReqBody(username,password,token);
-		byte[] loginBytes = JsonKit.toJsonBytes(loginBody);
+
+		UserBody userBody = new UserBody(Long.parseLong(memberId),token);
+		byte[] loginBytes = JsonKit.toJsonBytes(userBody);
 		request.setBody(loginBytes);
 		request.setBodyString(new String(loginBytes, HttpConst.CHARSET_NAME));
 		ImPacket loginRespPacket = loginHandler.handler(request, channelContext);
Index: src/main/java/io/renren/common/io/service/user/handler/UserCloseHandler.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/io/renren/common/io/service/user/handler/UserCloseHandler.java	(date 1555585743000)
+++ src/main/java/io/renren/common/io/service/user/handler/UserCloseHandler.java	(date 1555586064000)
@@ -1,9 +1,58 @@
 package io.renren.common.io.service.user.handler;
 
+import io.renren.common.io.service.user.processor.UserCloseServer;
+import io.renren.common.io.service.user.processor.UserLoginServer;
+import io.renren.common.io.service.user.processor.impl.UserCloseProcessor;
+import io.renren.common.io.service.user.processor.impl.UserLoginProcessor;
+import org.apache.commons.collections4.CollectionUtils;
+import org.jim.common.ImAio;
+import org.jim.common.ImPacket;
+import org.jim.common.ImStatus;
+import org.jim.common.packets.CloseReqBody;
+import org.jim.common.packets.Command;
+import org.jim.common.packets.RespBody;
+import org.jim.common.utils.ImKit;
+import org.jim.common.utils.JsonKit;
+import org.jim.server.command.AbstractCmdHandler;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import org.tio.core.Aio;
+import org.tio.core.ChannelContext;
+
+import java.util.List;
+
 /**
  * @auther: Easy
  * @date: 19-4-18 17:30
  * @description:
  */
-public class UserCloseHandler {
+public class UserCloseHandler extends AbstractCmdHandler{
+    private static Logger log = LoggerFactory.getLogger(UserCloseHandler.class);
+
+    @Override
+    public ImPacket handler(ImPacket packet, ChannelContext channelContext) throws Exception
+    {
+        CloseReqBody closeReqBody = null;
+        try{
+            closeReqBody = JsonKit.toBean(packet.getBody(),CloseReqBody.class);
+        }catch (Exception e) {
+            //关闭请求消息格式不正确
+            return ImKit.ConvertRespPacket(new RespBody(Command.COMMAND_CLOSE_REQ, ImStatus.C10020), channelContext);
+        }
+        List<UserCloseServer> userCloseCmdProcessors = this.getProcessor(channelContext, UserCloseServer.class);
+        if(CollectionUtils.isEmpty(userCloseCmdProcessors)){
+            log.info("登录失败,没有移除命令业务处理器!");
+            Aio.remove(channelContext, "no login serviceHandler processor!");
+            return null;
+        }
+        UserCloseServer userCloseServer = userCloseCmdProcessors.get(0);
+        userCloseServer.close(closeReqBody,channelContext);
+
+        return ImKit.ConvertRespPacket(new RespBody(Command.COMMAND_CLOSE_REQ, ImStatus.C10021), channelContext);
+    }
+
+    @Override
+    public Command command() {
+        return Command.COMMAND_CLOSE_REQ;
+    }
 }
Index: src/main/java/io/renren/common/io/service/user/handler/UserLoginReqHandler.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/io/renren/common/io/service/user/handler/UserLoginReqHandler.java	(date 1555585743000)
+++ src/main/java/io/renren/common/io/service/user/handler/UserLoginReqHandler.java	(date 1555586064000)
@@ -1,13 +1,10 @@
 package io.renren.common.io.service.user.handler;
 
 import io.renren.common.io.body.UserBody;
-import io.renren.common.io.service.user.processor.UserCmdProcessor;
+import io.renren.common.io.service.user.processor.UserLoginServer;
 import io.renren.common.io.service.user.resp.UserRespBody;
 import org.apache.commons.collections4.CollectionUtils;
-import org.jim.common.ImAio;
-import org.jim.common.ImPacket;
-import org.jim.common.ImSessionContext;
-import org.jim.common.ImStatus;
+import org.jim.common.*;
 import org.jim.common.message.MessageHelper;
 import org.jim.common.packets.*;
 import org.jim.common.protocol.IProtocol;
@@ -16,14 +13,11 @@
 import org.jim.server.command.AbstractCmdHandler;
 import org.jim.server.command.CommandManager;
 import org.jim.server.command.handler.JoinGroupReqHandler;
-import org.jim.server.command.handler.processor.login.LoginCmdProcessor;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.tio.core.Aio;
 import org.tio.core.ChannelContext;
 
-import java.nio.ByteBuffer;
-import java.util.Iterator;
 import java.util.List;
 
 /**
@@ -31,98 +25,89 @@
  * @date: 19-4-18 13:31
  * @description:
  */
-public class UserReqHandler  extends AbstractCmdHandler {
-    private static Logger log = LoggerFactory.getLogger(UserReqHandler.class);
+public class UserLoginReqHandler extends AbstractCmdHandler {
+    private static Logger log = LoggerFactory.getLogger(UserLoginReqHandler.class);
 
-    public UserReqHandler() {
+    public UserLoginReqHandler() {
     }
 @Override
     public ImPacket handler(ImPacket packet, ChannelContext channelContext) throws Exception {
-        if (packet.getBody() == null) {
-            Aio.remove(channelContext, "body is null");
-            return null;
-        } else {
-            List<LoginCmdProcessor> loginProcessors = this.getProcessor(channelContext, LoginCmdProcessor.class);
-            if (CollectionUtils.isEmpty(loginProcessors)) {
-                log.info("登录失败,没有登录命令业务处理器!");
-                Aio.remove(channelContext, "no login serviceHandler processor!");
-                return null;
-            } else {
-                UserCmdProcessor loginServiceHandler = (UserCmdProcessor)loginProcessors.get(0);
-                ImSessionContext imSessionContext = (ImSessionContext)channelContext.getAttribute();
-                UserBody userReqBody = (UserBody) JsonKit.toBean(packet.getBody(), UserBody.class);
-                UserRespBody userRespBody = loginServiceHandler.access(userReqBody, channelContext);
-                if (userRespBody != null && userRespBody.getUser() != null) {
-                    User user = userRespBody.getUser();
-                    String userId = user.getId();
-                    IProtocol protocol = ImKit.protocol((ByteBuffer)null, channelContext);
-                    String terminal = protocol == null ? "" : protocol.name();
-                    user.setTerminal(terminal);
-                    imSessionContext.getClient().setUser(user);
-                    ImAio.bindUser(channelContext, userId, this.imConfig.getMessageHelper().getBindListener());
-                    this.bindUnbindGroup(channelContext, user);
-                    loginServiceHandler.onSuccess(channelContext);
-                    userRespBody.clear();
-                    ImPacket loginRespPacket = new ImPacket(Command.COMMAND_LOGIN_RESP, userRespBody.toByte());
-                    return loginRespPacket;
-                } else {
-                    log.info("登录失败, loginName:{}, password:{}", userReqBody.getMemberId());
-                    if (userRespBody == null) {
-                        userRespBody = new UserRespBody(Command.COMMAND_LOGIN_RESP, ImStatus.C10008);
-                    }
+    if (packet.getBody() == null) {
+        Aio.remove(channelContext, "body is null");
+        return null;
+    }
+    List<UserLoginServer> userCmdProcessors = this.getProcessor(channelContext, UserLoginServer.class);
+    if(CollectionUtils.isEmpty(userCmdProcessors)){
+        log.info("登录失败,没有登录命令业务处理器!");
+        Aio.remove(channelContext, "no login serviceHandler processor!");
+        return null;
+    }
+    UserLoginServer userLoginServer = userCmdProcessors.get(0);
+    ImSessionContext imSessionContext = (ImSessionContext)channelContext.getAttribute();
+    UserBody userBody = JsonKit.toBean(packet.getBody(),UserBody.class);
+
+    UserRespBody userRespBody = userLoginServer.access(userBody,channelContext);
+    if (userRespBody == null || userRespBody.getUser() == null) {
+        log.info("登录失败, loginName:{}, password:{}", userBody.getMemberId());
+        if(userRespBody == null){
+            userRespBody = new UserRespBody(Command.COMMAND_LOGIN_RESP, ImStatus.C10008);
+        }
+        userRespBody.clear();
+        ImPacket loginRespPacket = new ImPacket(Command.COMMAND_LOGIN_RESP, userRespBody.toByte());
+        ImAio.bSend(channelContext,loginRespPacket);
+        ImAio.remove(channelContext, "loginName and token is incorrect");
+        return null;
+    }
+    User user = userRespBody.getUser();
+    String userId = user.getId();
+    IProtocol protocol = ImKit.protocol(null, channelContext);
+    String terminal = protocol == null ? "" : protocol.name();
+    user.setTerminal(terminal);
+    imSessionContext.getClient().setUser(user);
+    ImAio.bindUser(channelContext,userId,imConfig.getMessageHelper().getBindListener());
+    //初始化绑定或者解绑群组;
+    bindUnbindGroup(channelContext, user);
+    userLoginServer.onSuccess(channelContext);
+    userRespBody.clear();
+    ImPacket loginRespPacket = new ImPacket(Command.COMMAND_LOGIN_RESP, userRespBody.toByte());
+    return loginRespPacket;
+    }
 
-                    userRespBody.clear();
-                    ImPacket loginRespPacket = new ImPacket(Command.COMMAND_LOGIN_RESP, userRespBody.toByte());
-                    ImAio.bSend(channelContext, loginRespPacket);
-                    ImAio.remove(channelContext, "loginName and token is incorrect");
-                    return null;
-                }
-            }
-        }
-    }
-
-    public void bindUnbindGroup(ChannelContext channelContext, User user) throws Exception {
+    /**
+     * 初始化绑定或者解绑群组;
+     */
+    public void bindUnbindGroup(ChannelContext channelContext , User user)throws Exception{
         String userId = user.getId();
+        System.out.println(userId);
         List<Group> groups = user.getGroups();
-        if (groups != null) {
-            boolean isStore = "on".equals(this.imConfig.getIsStore());
+        if( groups != null){
+            boolean isStore = ImConst.ON.equals(imConfig.getIsStore());
             MessageHelper messageHelper = null;
             List<String> groupIds = null;
-            if (isStore) {
-                messageHelper = this.imConfig.getMessageHelper();
+            if(isStore){
+                messageHelper = imConfig.getMessageHelper();
                 groupIds = messageHelper.getGroups(userId);
             }
-
-            Iterator var8 = groups.iterator();
-
-            while(var8.hasNext()) {
-                Group group = (Group)var8.next();
-                if (isStore && groupIds != null) {
+            //绑定群组
+            for(Group group : groups){
+                if(isStore && groupIds != null){
                     groupIds.remove(group.getGroup_id());
                 }
-
-                ImPacket groupPacket = new ImPacket(Command.COMMAND_JOIN_GROUP_REQ, JsonKit.toJsonBytes(group));
-
+                ImPacket groupPacket = new ImPacket(Command.COMMAND_JOIN_GROUP_REQ,JsonKit.toJsonBytes(group));
                 try {
-                    JoinGroupReqHandler joinGroupReqHandler = (JoinGroupReqHandler) CommandManager.getCommand(Command.COMMAND_JOIN_GROUP_REQ, JoinGroupReqHandler.class);
+                    JoinGroupReqHandler joinGroupReqHandler = CommandManager.getCommand(Command.COMMAND_JOIN_GROUP_REQ, JoinGroupReqHandler.class);
                     joinGroupReqHandler.bindGroup(groupPacket, channelContext);
-                } catch (Exception var12) {
-                    log.error(var12.toString(), var12);
+                } catch (Exception e) {
+                    log.error(e.toString(),e);
                 }
             }
-
-            if (isStore && groupIds != null) {
-                var8 = groupIds.iterator();
-
-                while(var8.hasNext()) {
-                    String groupId = (String)var8.next();
+            if(isStore && groupIds != null){
+                for(String groupId : groupIds){
                     messageHelper.getBindListener().onAfterGroupUnbind(channelContext, groupId);
                 }
             }
         }
-
-    }
-@Override
+    }@Override
     public Command command() {
         return Command.COMMAND_LOGIN_REQ;
     }
Index: src/main/java/io/renren/common/io/service/user/processor/UserCloseServer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/io/renren/common/io/service/user/processor/UserCloseServer.java	(date 1555585743000)
+++ src/main/java/io/renren/common/io/service/user/processor/UserCloseServer.java	(date 1555586064000)
@@ -1,9 +1,16 @@
 package io.renren.common.io.service.user.processor;
 
+import org.jim.common.packets.CloseReqBody;
+import org.jim.common.packets.User;
+import org.jim.server.command.handler.processor.CmdProcessor;
+import org.tio.core.ChannelContext;
+
 /**
  * @auther: Easy
  * @date: 19-4-18 17:04
  * @description:
  */
-public interface UserCloseServer {
+public interface UserCloseServer extends CmdProcessor {
+    void close(CloseReqBody closeReqBody,ChannelContext channelContext);
+
 }
Index: src/main/java/io/renren/common/io/service/user/processor/impl/UserCloseProcessor.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/io/renren/common/io/service/user/processor/impl/UserCloseProcessor.java	(date 1555585743000)
+++ src/main/java/io/renren/common/io/service/user/processor/impl/UserCloseProcessor.java	(date 1555586064000)
@@ -1,9 +1,46 @@
 package io.renren.common.io.service.user.processor.impl;
 
+import io.renren.common.io.SocketServiceUtil;
+import io.renren.common.io.service.user.processor.UserCloseServer;
+import io.renren.common.utils.RedisUtils;
+import org.jim.common.ImAio;
+import org.jim.common.packets.CloseReqBody;
+import org.jim.server.command.handler.CloseReqHandler;
+import org.tio.core.ChannelContext;
+
 /**
  * @auther: Easy
  * @date: 19-4-18 16:59
  * @description:
  */
-public class UserCloseCmdProcessor {
+public class UserCloseProcessor  implements UserCloseServer {
+    @Override
+    public void close(CloseReqBody closeReqBody, ChannelContext channelContext) {
+
+        if(closeReqBody == null || closeReqBody.getUserid() == null){
+            RedisUtils redisUtils = SocketServiceUtil.getBean(RedisUtils.class);
+            redisUtils.delete("online:"+channelContext.getUserid());
+            ImAio.remove(channelContext, "收到关闭请求");
+        }else{
+            String userId = closeReqBody.getUserid();
+            RedisUtils redisUtils = SocketServiceUtil.getBean(RedisUtils.class);
+            redisUtils.delete("online:"+userId);
+            ImAio.remove(userId, "收到关闭请求!");
+        }
+
+
+    }
+
+
+
+    @Override
+    public boolean isProtocol(ChannelContext channelContext) {
+        return true;
+    }
+
+    @Override
+    public String name() {
+        return "default";
+    }
+
 }
Index: src/main/java/io/renren/common/utils/RedisUtils.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/io/renren/common/utils/RedisUtils.java	(date 1555585743000)
+++ src/main/java/io/renren/common/utils/RedisUtils.java	(date 1555586064000)
@@ -6,7 +6,9 @@
 import org.springframework.data.redis.core.*;
 import org.springframework.stereotype.Component;
 
+import java.util.ArrayList;
 import java.util.List;
+import java.util.Set;
 import java.util.concurrent.TimeUnit;
 
 /**
@@ -80,6 +82,7 @@
     }
 
 
+
     public <T> void addList(String key, List<T> value) {
         addList(key,value,DEFAULT_EXPIRE);
     }
@@ -105,6 +108,30 @@
         }
         return BeanUtil.copy(value, clazz);
     }
+    /**
+     * 有序集合添加
+     * @param key
+     * @param value
+     * @param scoure
+     */
+    public void zAdd(String key,Object value,double scoure){
+        ZSetOperations<String, Object> zset = redisTemplate.opsForZSet();
+        zset.add(key,value,scoure);
+    }
+
+    /**
+     * 有序集合获取
+     * @param key
+
+     * @return
+     */
+    public <T> List<T> rangeByScore(String key,Class<T> clazz){
+        ZSetOperations<String, Object> zset = redisTemplate.opsForZSet();
+        Set<Object> set = zset.range(key, 0, -1);
+        List<Object> value = new ArrayList<>(set);
+
+        return  BeanUtil.copy(value, clazz);
+    }
 
     /**
      * Object转成JSON数据
Index: src/main/java/io/renren/modules/app/controller/setting/MemberController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/io/renren/modules/app/controller/setting/MemberController.java	(date 1555585743000)
+++ src/main/java/io/renren/modules/app/controller/setting/MemberController.java	(date 1555586064000)
@@ -131,6 +131,7 @@
     @ApiOperation("关注用户")
     public R followMember(@RequestParam Long toMemberId) {
         memberService.followMember(ReqUtils.currentUserId(), toMemberId);
+
         return R.ok();
     }
 
Index: src/main/resources/command.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>NATIVE_TO_ASCII_UTF-8
===================================================================
--- src/main/resources/command.properties	(date 1555585743000)
+++ src/main/resources/command.properties	(date 1555586064000)
@@ -1,0 +1,23 @@
+#########################################
+# CommandHandler configuration
+# [cmd命令码] = 全局cmd处理理器类路径(必须处在第一位),该cmd命令不同业务处理器
+#########################################
+#鉴权请求处理器
+3 = org.jim.server.command.handler.AuthReqHandler
+#聊天请求处理器
+11 = org.jim.server.command.handler.ChatReqHandler,org.jim.server.command.handler.processor.chat.DefaultAsyncChatMessageProcessor
+#关闭、退出请求处理器
+14 = io.renren.common.io.service.user.handler.UserCloseHandler
+#握手请求处理器(TCP协议握手处理器,WS协议握手处理器)
+1 = org.jim.server.command.handler.HandshakeReqHandler,org.jim.server.command.handler.processor.handshake.TcpHandshakeProcessor,org.jim.server.command.handler.processor.handshake.WsHandshakeProcessor
+#心跳请求处理器
+13 = org.jim.server.command.handler.HeartbeatReqHandler
+#加入群组请求处理器
+7 = org.jim.server.command.handler.JoinGroupReqHandler
+#登录请求处理器
+5 = io.renren.common.io.service.user.handler.UserLoginReqHandler
+#获取用户信息处理器
+17 = org.jim.server.command.handler.UserReqHandler
+#获取用户消息处理器
+19 = org.jim.server.command.handler.MessageReqHandler
+
Index: src/main/resources/jim.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>NATIVE_TO_ASCII_UTF-8
===================================================================
--- src/main/resources/jim.properties	(date 1555585743000)
+++ src/main/resources/jim.properties	(date 1555586064000)
@@ -2,7 +2,7 @@
 #ip
 jim.bind.ip = 127.0.0.1
 #端口
-jim.port = 8888
+jim.port = 11805
 #心跳超时时长
 jim.heartbeat.timeout = 0
 #是否开启消息持久化(on:开启,off:不开启)
@@ -10,17 +10,17 @@
 #是否开启集群(on:开启,off:不开启)
 jim.cluster = off
 #是否开启SSL(on:开启,off:不开启)
-jim.ssl = off
+jim.ssl = on
 #JKS证书地址
-jim.key.store.path = classpath:ssl/keystore.jks
+jim.key.store.path = classpath:pet.fangzheng.fun.jks
 #JKS证书密码
-jim.key.store.pwd = 214323428310224
+jim.key.store.pwd = xukaka
 
 ##http协议 配置
 #html/css/js等的根目录，支持classpath:也支持绝对路径
 jim.http.page = classpath:page
 #http mvc扫描包路径
-jim.http.scan.packages = org.jim.server.demo.ImServerDemoStart
+jim.http.scan.packages = io.renren.RenrenApplication
 #http资源缓存时长
 jim.http.max.live.time = 0
 
Index: src/main/resources/logback.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>NATIVE_TO_ASCII_UTF-8
===================================================================
--- src/main/resources/logback.properties	(date 1555585743000)
+++ src/main/resources/logback.properties	(date 1555586064000)
@@ -1,9 +1,9 @@
 #http://logback.qos.ch/manual/configuration.html
 #<include resource="includedConfig.xml"/>  resource, file, url (被包含的文件需要满足一定格式)
 
-context.name=j-im-server-demo
+context.name=leifeng
 
-log.dir=/logs/j-im-server-demo
+log.dir=/logs/leifeng
 
 rolling.policy.file.name.pattern=yyyy-MM-dd
 max.file.size=100MB
Index: src/main/resources/logback-spring.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/resources/logback-spring.xml	(date 1555585743000)
+++ src/main/resources/logback-spring.xml	(date 1555585743000)
@@ -1,21 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<configuration>
-    <include resource="org/springframework/boot/logging/logback/base.xml" />
-    <logger name="org.springframework.web" level="INFO"/>
-    <logger name="org.springboot.sample" level="TRACE" />
-
-    <!-- 开发、测试环境 -->
-    <springProfile name="dev,test,prod">
-        <logger name="org.springframework.web" level="INFO"/>
-        <logger name="org.springboot.sample" level="INFO" />
-        <logger name="io.renren" level="DEBUG" />
-    </springProfile>
-
-    <!-- 生产环境 -->
-   <!-- <springProfile name="prod">
-        <logger name="org.springframework.web" level="ERROR"/>
-        <logger name="org.springboot.sample" level="ERROR" />
-        <logger name="io.renren" level="ERROR" />
-    </springProfile>-->
-
-</configuration>
\ No newline at end of file
